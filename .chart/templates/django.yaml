apiVersion: v1
kind: Service
metadata:
  name: django
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - name: {{ .Values.app.port | quote }}
      targetPort: {{ .Values.app.port }}
      port: {{ .Values.app.port }}
  selector:
    service: django

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: django
  name: django
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.app.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      service: django
  template:
    metadata:
      labels:
        service: django
    spec:
      securityContext:
        fsGroup: 101 # django group
      initContainers:
        - args: ["manage", "bootstrap"]
          name: bootstrap
          image: {{ .Values.app.image }}
          envFrom:
            - configMapRef:
                name: env
          resources:
            requests:
              memory: "200Mi"
          volumeMounts:
            - mountPath: /project/static
              name: static
            - mountPath: /project/media
              name: media
      containers:
        - args: ["uwsgi"]
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: env
          image: {{ .Values.app.image }}
          name: django
          ports:
            - containerPort: {{ .Values.app.port }}
          resources:
            requests:
              memory: "200Mi"
          volumeMounts:
            - mountPath: /project/static
              name: static
            - mountPath: /project/media
              name: media
      restartPolicy: Always
      volumes:
        - name: static
          persistentVolumeClaim:
            claimName: static
        - name: media
          persistentVolumeClaim:
            claimName: media
      nodeSelector:
        node-type: preemptible
      tolerations:
        - key: node-type
          operator: Equal
          value: preemptible
          effect: NoSchedule
